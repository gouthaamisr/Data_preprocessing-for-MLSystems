# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from main import interpolate
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QCheckBox
import csv

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.input_file_name = "";
        self.checkbox_list =[]
        self.checked_input_col_no_list=[]

        '''The below lines of code are setting up User Interface'''
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.pushButtonCancel = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonCancel.setObjectName("pushButtonCancel")
        self.gridLayout_2.addWidget(self.pushButtonCancel, 2, 1, 1, 1)
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 643, 539))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.gridLayout = QtWidgets.QGridLayout(self.scrollAreaWidgetContents)
        self.gridLayout.setObjectName("gridLayout")
        self.label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 467, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem, 1, 0, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(757, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem1, 2, 0, 1, 1)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.gridLayout_2.addWidget(self.scrollArea, 0, 0, 3, 1)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButtonImport = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonImport.setObjectName("pushButtonImport")
        self.verticalLayout.addWidget(self.pushButtonImport)
        self.pushButtonCheckAll = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonCheckAll.setObjectName("pushButtonCheckAll")
        self.verticalLayout.addWidget(self.pushButtonCheckAll)
        self.pushButtonUncheckAll = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonUncheckAll.setObjectName("pushButtonUncheckAll")
        self.verticalLayout.addWidget(self.pushButtonUncheckAll)
        self.pushButtonSelectOutputFolder = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonSelectOutputFolder.setObjectName("pushButtonSelectOutputFolder")
        self.verticalLayout.addWidget(self.pushButtonSelectOutputFolder)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem2)
        self.gridLayout_2.addLayout(self.verticalLayout, 0, 1, 1, 1)
        self.pushButtonOK = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonOK.setObjectName("pushButtonOK")
        self.gridLayout_2.addWidget(self.pushButtonOK, 1, 1, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionImport = QtWidgets.QAction(MainWindow)
        self.actionImport.setObjectName("actionImport")
        self.menuFile.addAction(self.actionImport)
        self.menuFile.addAction(self.actionExit)
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        '''Setting up button actions to the functions'''
        self.actionExit.triggered.connect(lambda: exit(0))
        self.actionImport.triggered.connect(self.browsefiles)
        self.pushButtonImport.clicked.connect(self.browsefiles)
        self.pushButtonCancel.clicked.connect(lambda: exit(0))
        self.pushButtonSelectOutputFolder.clicked.connect(self.select_output_folder)
        self.pushButtonCheckAll.clicked.connect(self.check_all)
        self.pushButtonUncheckAll.clicked.connect(self.uncheck_all)
        self.pushButtonOK.clicked.connect(self.ok_button_clicked)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButtonCancel.setText(_translate("MainWindow", "Cancel"))
        self.label.setText(
            _translate("MainWindow", "Check or Uncheck the columns that needs to be added to the output file"))
        self.pushButtonImport.setText(_translate("MainWindow", "Import"))
        self.pushButtonCheckAll.setText(_translate("MainWindow", "Check All Input Columns"))
        self.pushButtonUncheckAll.setText(_translate("MainWindow", "Unheck All Input Columns"))
        self.pushButtonSelectOutputFolder.setText(_translate("MainWindow", "Select Output Folder"))
        self.pushButtonOK.setText(_translate("MainWindow", "OK"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionImport.setText(_translate("MainWindow", "Import"))


    def browsefiles(self):
        self.input_file_name = QFileDialog.getOpenFileName(None, 'Open File', 'D:')
        self.read_file_generate_cbs(self.input_file_name)

    def select_output_folder(self):
        output_file_name = QFileDialog().getOpenFileName(None, 'Select Output Folder', 'D:', '', '',
                                                         QFileDialog.ShowDirsOnly)
    def read_file_generate_cbs(self, file_name):
        input_header_list=[]
        with open(file_name[0], 'r') as infile:
            reader = csv.reader(infile, delimiter=',')
            input_header_list = next(reader)
        for i in range(len(input_header_list)):
            name=input_header_list[i]
            cb = QCheckBox(name)
            if(i<5):
                cb.setEnabled(0)
            self.checkbox_list.append(cb)
            self.gridLayout.addWidget(cb)

    def check_all(self):
        for cb in self.checkbox_list:
            if cb.isEnabled():
                cb.setChecked(1)

    def uncheck_all(self):
        for cb in self.checkbox_list:
            if cb.isEnabled():
                cb.setChecked(0)

    def ok_button_clicked(self):
        self.checked_input_col_no_list.clear()
        for i in range(len(self.checkbox_list)):
            if self.checkbox_list[i].isEnabled() and self.checkbox_list[i].isChecked():
                self.checked_input_col_no_list.append(i)

        print(self.checked_input_col_no_list)
        interpolate(self.input_file_name[0], self.checked_input_col_no_list)

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())


